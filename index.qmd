---
title: "Reproducible environments for data science with {rix}"
author: "Bruno Rodrigues"
format:
  revealjs:
    embed-resources: true
    slide-number: true
    theme: solarized
    incremental: true
  pptx:
    freeze: true
execute:
  echo: true
---

## Intro: Who am I

Bruno Rodrigues, head of the statistics department at the Ministry of Research
and Higher Education in Luxembourg

## Intro: Who am I

![](images/luxembourg.png){fig-align="center"}

## Intro: Who am I

Slides available online:

[https://b-rodrigues.github.io/r-medicine-nix-workshop](https://b-rodrigues.github.io/r-medicine-nix-workshop)

Code available here:

[https://github.com/b-rodrigues/r-medicine-nix-workshop](https://github.com/b-rodrigues/r-medicine-nix-workshop)

## What I’ll talk about

- Identify *what* needs to be mastered to ensure reproducibility
  (ability to obtain *exactly* the same results from an analysis)
- Briefly introduce Nix, `{rix}`, and `{rixpress}`

## Available solutions for R (1/2)

- `{renv}` or `{groundhog}`: simple to use, but:
  - Doesn't save the R version
  - Installing old packages may fail (system dependencies)

- Docker goes further:
  - Manages R *and* system dependencies
  - Uses immutable and shareable images
  - Containers executable anywhere

## Available solutions for R (2/2)

- Docker limitations:
  - Learning curve (Linux knowledge recommended)
  - Not originally designed for reproducibility
  - See: [Rocker](https://rocker-project.org/images/versioned/r-ver.html)

## The Nix package manager (1/2)

Package manager: tool for installing and managing *packages*

Package: any software (not just R packages)

A popular package manager:

. . .

![Google Play Store](images/play_store.png)

## The Nix package manager (2/2)

- To ensure reproducibility: R, R packages, and other dependencies must be
  explicitly managed
- Nix is a package manager truly focused on reproducible builds
- Nix manages everything using a single text file (called a Nix expression)!
- These expressions *always* produce exactly the same result

## rix: reproducible development environments with Nix (1/5)

- `{rix}` ([website](https://docs.ropensci.org/rix/)) simplifies writing Nix
  expressions!
- Just use the provided `rix()` function:

. . .

```{r, eval = FALSE}
library(rix)

rix(date = "2025-06-02",
    r_pkgs = c("dplyr", "ggplot2"),
    system_pkgs = NULL,
    git_pkgs = NULL,
    tex_pkgs = NULL,
    ide = "code",
    project_path = ".")
```

## rix: reproducible development environments with Nix (2/5)

- `renv.lock` files can also serve as a starting point:

. . .

```{r, eval = FALSE}
library(rix)

renv2nix(
  renv_lock_path = "path/to/original/renv_project/renv.lock",
  project_path = "path/to/rix_project",
  override_r_ver = "4.4.1" # <- optional
)
```

## rix: reproducible development environments with Nix (3/5)

- List the R version and required packages
- Optionally:
    * system packages, GitHub packages, or LaTeX packages
    * an IDE (RStudio, Radian, VS Code, or "other")
    * a version of Python and Python packages to include
    * a version of Julia and Julia packages to include

## rix: reproducible development environments with Nix (4/5)

- `rix::rix()` generates a `default.nix` file
- Build the expressions with `nix-build` (in terminal) or
  `rix::nix_build()` from R
- Access the development environment with `nix-shell`
- Expressions can be generated even without Nix installed (with some
  limitations)

## rix: reproducible development environments with Nix (5/5)

- Can install specific versions of packages (write `"dplyr@1.0.0"`)
- Can install packages hosted on GitHub
- Many vignettes to get started! [See
  here](https://docs.ropensci.org/rix/articles/)

## Demo

- Basics: `scripts/nix_expressions/rix_intro/`
- Nix and `{targets}`: `scripts/nix_expressions/nix_targets_pipeline`
- Nix and Docker: `scripts/nix_expressions/docker/`
- Nix and `{shiny}`: `scripts/nix_expression/shiny`
- GitHub Actions: [see
  here](https://github.com/b-rodrigues/rix_paper/tree/master)

## Polyglot pipelines with `{rixpress}`

- `{rixpress}` allows chaining processing steps in R **and** Python
- Uses `{rix}` to create a reproducible (via Nix) execution environment for the
  pipeline
- Each pipeline step is a **Nix derivation**
- Data transfer: automatic via `reticulate` or universal format (JSON)

## An example of a mixed pipeline

```r
list(
  rxp_py_file(…),    # Read a CSV with Python
  rxp_py(…),         # Filter with Polars
  rxp_py2r(…),       # Python → R transfer
  rxp_r(…),          # Transformation in R
  rxp_r2py(…),       # R → Python transfer
  rxp_py(…),         # Another Python step
  rxp_py2r(…),       # Back to R
  rxp_r(…)           # Final step
) |> rixpress()
```

- Each step is named and typed (`py`, `r`, `r2py`, etc.)
- Ability to add files (`functions.R`, images…)

## Transfer with JSON (or other universal format)

- Advantage: avoids using `reticulate`
- Add a Python serialization function:

. . .

```python
def serialize_to_json(pl_df, path):
    with open(path, 'w') as f:
        f.write(pl_df.write_json())
```

- And on the R side:

. . .

```r
rxp_r(
  name = "x",
  expr = my_fun(data),
  unserialize_function = "jsonlite::fromJSON"
)
```

## Document generation (Quarto or Rmd)

- Easily integrate pipeline output into a `.qmd`:

. . .

````qmd
```r
rixpress::rxp_read("mtcars_head")
```
````

. . .

- All created objects can be dynamically loaded into the document

- Possible to include additional files (`content.qmd`, images…)

## To learn more:

- [Repository GitHub](https://github.com/b-rodrigues/rixpress)
- [Site web](https://b-rodrigues.github.io/rixpress/)
- [Repository d’exemples](https://github.com/b-rodrigues/rixpress_demos)

## Fin

If you have questions:

- bruno@brodrigues.co
- Twitter : [@brodriguesco](https://x.com/brodriguesco)
- Mastodon : [@brodriguesco@fosstodon.org](https://fosstodon.org/@brodriguesco)
- Blog : [www.brodrigues.co](https://brodrigues.co/)
- Livre : [www.raps-with-r.dev](https://raps-with-r.dev/)
- rix : [https://docs.ropensci.org/rix](https://docs.ropensci.org/rix)
- rixpress : [https://b-rodrigues.github.io/rixpress/](https://b-rodrigues.github.io/rixpress/)

Thanks!
