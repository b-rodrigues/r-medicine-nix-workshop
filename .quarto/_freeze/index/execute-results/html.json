{
  "hash": "7fc8198f03a9109221913162f98dc4ce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducible environments and pipelines with `{rix}` and `{rixpress}`\"\nauthor:\n  - name: \"Bruno Rodrigues\"\n    affiliation:\n      - \"Ministry of Research and Higher education\"\ndate: last-modified\ndate-format: \"June 11th, 2025\"\nformat:\n  revealjs:\n    theme:\n      - default\n      - slides.scss\n    title-slide-attributes:\n      data-background-image: \"img/rmed_background.png\"\n      data-background-size: cover\n      data-background-opacity: \"50\"\n    fontsize: 2em\n    html-math-method: mathjax\n    slide-number: c/t\n    show-slide-number: all\n    highlight-style: rstudio_default-light.theme\n    logo: \"img/rmed.png\"\n    footer: \"[Slides are here](https://b-rodrigues.github.io/r-medicine-nix-workshop){target='_blank'}\"  # complete the URL\n    include-after-body: \"img/clean_title_page.html\"\ninclude-in-header:\n  text: |\n    <link rel=\"shortcut icon\" href=\"img/rmed.ico\"/>\nembed-resources: true\nknitr:\n  opts_chunk:      ########## set global options ############\n    collapse: true # keep code from blocks together (if shown)\n    echo: false    # don't show code\n    message: true  # show messages\n    warning: true  # show warnings\n    error: true    # show error messages\n    comment: \"\"    # don't show ## with printed output\n    R.options:   \n      digits: 3    # round to three digits\neditor_options:\n  chunk_output_type: console\neditor: source\nhighlight-style: rstudio_default-light.theme\n---\n\n## Intro: Who am I\n\nBruno Rodrigues, head of the statistics department at the Ministry of Research\nand Higher Education in Luxembourg\n\n## Intro: Luxembourg?\n\n![](img/luxembourg.png){fig-align=\"center\"}\n\n## Intro: Luxembourg?\n\n![](img/luxembourg2.png){fig-align=\"center\"}\n\n## Intro: Luxembourg?\n\n<table style=\"width: 100%;\">\n  <tr>\n    <td style=\"width: 472px; vertical-align: top;\">\n      <img src=\"img/grand_duke.jpg\" alt=\"HRH Grand Duke Henri\" style=\"width: 100%; max-width: 150px;\">\n    </td>\n    <td style=\"vertical-align: top;\">\n      <ul>\n        <li>Recognized as an independent state in 1839 via the Treaty of London</li>\n        <li>Constitutional monarchy ruled by a Grand Duke (head of state)</li>\n        <li>The Prime Minister serves as head of government</li>\n        <li>One of the founding members of the European Union</li>\n      </ul>\n    </td>\n  </tr>\n</table>\n\n\n\n## Intro: Who am I\n\nSlides available online:\n\n[https://b-rodrigues.github.io/r-medicine-nix-workshop](https://b-rodrigues.github.io/r-medicine-nix-workshop)\n\nCode available here:\n\n[https://github.com/b-rodrigues/r-medicine-nix-workshop](https://github.com/b-rodrigues/r-medicine-nix-workshop)\n\n## What I’ll talk about\n\n- Identify *what* needs to be mastered to ensure reproducibility\n  (ability to obtain *exactly* the same results from an analysis)\n- Briefly introduce Nix, `{rix}`, and `{rixpress}`\n\n## This workshop in a nutshell\n\nThe reproducibility puzzle you know\n\n![](img/repro_puzzle.png){fig-align=\"center\"}\n\n## This workshop in a nutshell\n\nThe reproducibility puzzle with Nix\n\n![](img/repro_puzzle_nix.png){fig-align=\"center\"}\n\n# Part 1: Reproducible environments for data science with {rix}\n\n## Available solutions for R (1/2)\n\n- `{renv}` or `{groundhog}`: simple to use, but:\n  - Doesn't save the R version\n  - Installing old packages may fail (system dependencies)\n\n- Docker goes further:\n  - Manages R *and* system dependencies\n  - Uses immutable and shareable img\n  - Containers executable anywhere\n\n## Available solutions for R (2/2)\n\n- Docker limitations:\n  - Learning curve (Linux knowledge recommended)\n  - Not originally designed for reproducibility\n  - See: [Rocker](https://rocker-project.org/img/versioned/r-ver.html)\n\n## The Nix package manager (1/2)\n\nPackage manager: tool for installing and managing *packages*\n\nPackage: any software (not just R packages)\n\nA popular package manager:\n\n. . .\n\n![Google Play Store](img/play_store.png)\n\n## The Nix package manager (2/2)\n\n- To ensure reproducibility: R, R packages, and other dependencies must be\n  explicitly managed\n- Nix is a package manager truly focused on reproducible builds\n- Nix manages everything using a single text file (called a Nix expression)!\n- These expressions *always* produce exactly the same result\n\n## rix: reproducible development environments with Nix (1/5)\n\n- `{rix}` ([website](https://docs.ropensci.org/rix/)) simplifies writing Nix\n  expressions!\n\n- Just use the provided `rix()` function:\n\n. . .\n\n```r\nlibrary(rix)\n\nrix(date = \"2025-06-02\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"code\",\n    project_path = \".\")\n```\n\n## rix: reproducible development environments with Nix (2/5)\n\n- `renv.lock` files can also serve as a starting point:\n\n. . .\n\n```r\nlibrary(rix)\n\nrenv2nix(\n  renv_lock_path = \"path/to/original/renv_project/renv.lock\",\n  project_path = \"path/to/rix_project\",\n  override_r_ver = \"4.4.1\" # <- optional\n)\n```\n\n## rix: reproducible development environments with Nix (3/5)\n\n- List the R version and required packages\n- Optionally:\n    * system packages, GitHub packages, or LaTeX packages\n    * an IDE (RStudio, Radian, VS Code, or \"other\")\n    * a version of Python and Python packages to include\n    * a version of Julia and Julia packages to include\n\n## rix: reproducible development environments with Nix (4/5)\n\n- `rix::rix()` generates a `default.nix` file\n- Build the expressions with `nix-build` (in terminal) or\n  `rix::nix_build()` from R\n- Access the development environment with `nix-shell`\n- Expressions can be generated even without Nix installed (with some\n  limitations)\n\n## rix: reproducible development environments with Nix (5/5)\n\n- Can install specific versions of packages (write `\"dplyr@1.0.0\"`)\n- Can install packages hosted on GitHub\n- Many vignettes to get started! [See\n  here](https://docs.ropensci.org/rix/articles/)\n\n## Demo\n\n- Basics: `scripts/nix_expressions/01_rix_intro/`\n- Native Code/Positron on Windows: `scripts/nix_expressions/02_native_vscode_example/`\n- Nix and `{targets}`: `scripts/nix_expressions/03_nix_targets_pipeline`\n- Nix and Docker: `scripts/nix_expressions/04_docker/`\n- Nix and `{shiny}`: `scripts/nix_expressions/05_shiny`\n- GitHub Actions: [see\n  here](https://github.com/b-rodrigues/rix_paper/tree/master)\n\n# Part 2: Reproducible analytical pipelines with `{rixpress}`\n\n## Introduction (1/3)\n\n- Nix is actually more than just a mere package manager\n- Nix is complete end-to-end build tool that leverages functional programming\n  principles to ensure reproducible builds\n- Users write Nix expressions which are then translated into Nix derivations\n- Derivation: *a specification for running an executable on precisely defined\n  input files to repeatably produce output files at uniquely determined file\n  system paths.*\n  ([source](https://nix.dev/manual/nix/2.25/language/derivations))\n\n## Introduction (2/3)\n\n- Essentially: a derivation is a recipe with precisely defined inputs, steps,\n  and a fixed output.\n- Given identical inputs and build steps → always produce exact same output\n- All inputs to a derivation must be explicitly declared.\n- Inputs include not just data files, but also software dependencies,\n  configuration flags, and environment variables, essentially anything necessary\n  for the build process.\n- The build process takes place in a *hermetic* sandbox to ensure the exact same\n  output is always produced.\n\n## Introduction (3/3)\n\n- `{rix}`: output is a *shell* that contains required software\n- `{rixpress}`: output is whatever is the output of your pipeline (cleaned\n  dataset, Quarto/Rmd document, model predictions, model parameters/weights,\n  model itself...)\n\n## rixpress\n\n- `{rixpress}` allows chaining processing steps in R **and** Python\n- Uses `{rix}` to create a reproducible (via Nix) execution environment for the\n  pipeline\n- Each pipeline step is a **Nix derivation**\n- Data transfer: automatic via `reticulate` or universal format (CSV, JSON,\n  Parquet...)\n\n## An example of a polyglot pipeline\n\n```r\nlist(\n  rxp_py_file(…),    # Read a CSV with Python\n  rxp_py(…),         # Filter with Polars\n  rxp_py2r(…),       # Python → R transfer\n  rxp_r(…),          # Transformation in R\n  rxp_r2py(…),       # R → Python transfer\n  rxp_py(…),         # Another Python step\n  rxp_py2r(…),       # Back to R\n  rxp_r(…)           # Final step\n) |> rixpress()\n```\n\n- Each step is named and typed (`py`, `r`, `r2py`, etc.)\n- Ability to add files (`functions.R`, img…)\n\n## Defining a derivation (input data)\n\n```r\nrxp_r_file(\n  name = mtcars,\n  path = 'data/mtcars.csv',\n  read_function = \\(x) (read.csv(file = x, sep = \"|\"))\n)\n```\n\n## Defining a derivation (some computation)\n\n```r\nrxp_r(\n  name = filtered_mtcars,\n  expr = filter(mtcars, am == 1)\n)\n```\n\n## Typical structure of a rixpress project\n\n```\n.\n├── data\n│   └── dataset.csv    # input data (can be many files)\n├── functions.py       # user-defined Python functions\n├── functions.R        # user-defined R function\n├── gen-env.R          # rix script to generate execution env\n├── gen-pipeline.R     # rixpress script to generate pipeline\n├── my_paper           # folder containing Quarto doc\n│   ├── section.qmd    # Qmd file\n│   ├── img         # Folder containing img for document\n│   │   └── graph.png  # Image to add to paper\n│   └── main.qmd       # Main Qmd file\n└── Readme.md          # Readme\n```\n\n## Defining Quarto or Rmd documents\n\nUse `rxp_read()` to include pipeline outputs:\n\n```r\nrixpress::rxp_read(\"mtcars_head\")\n```\n\nAll created objects can be dynamically loaded into the document\n\nPossible to include additional files (`content.qmd`, img…)\n\n## Using rixpress (1/3)\n\n- Start from an empty folder;\n- Drop into a temporary shell:\n\n. . .\n\n```bash\nnix-shell --expr \"$(curl -sl https://raw.githubusercontent.com/ropensci/rix/main/inst/extdata/default.nix)\"\n```\n\n## Using rixpress (2/3)\n\n- Start project structure using `rixpress::rxp_init()`;\n- Edit `gen-env.R` and `gen-pipeline.R`;\n- Write code in `gen-pipeline.R` and build pipeline using `rxp_make()`;\n- Inspect outputs using `rxp_inspect()`;\n- View outputs using `rxp_read()` (load them using `rxp_load()`;\n- View DAG of pipeline using `rxp_ggdag()` or `rxp_visnetwork()`\n\n## Using rixpress (3/3)\n\n- Build artifacts get saved and re-used across runs;\n- Possible to export and import them using `import_nix_archive()` and\n  `export_nix_archive()` (very useful on CI!);\n- To set up GitHub Actions use `rxp_ga()`;\n- Logs of runs get saved, and possible to reload older versions of build\n  artifacts (see [vignette](https://b-rodrigues.github.io/rixpress/articles/g-logs.html)).\n\n## Transfer with JSON (or other universal format)\n\n- Advantage: avoids using `reticulate`\n- Add a Python serialization function:\n\n```python\ndef serialize_to_json(pl_df, path):\n    with open(path, 'w') as f:\n        f.write(pl_df.write_json())\n```\n\n. . .\n\n- And on the R side:\n\n```r\nrxp_r(\n  name = \"x\",\n  expr = my_fun(data),\n  unserialize_function = \"jsonlite::fromJSON\"\n)\n```\n\n## Interactive demo\n\nSee `scripts/rixpress_demo`\n\n## To learn more:\n\n- [Repository GitHub](https://github.com/b-rodrigues/rixpress)\n- [Website](https://b-rodrigues.github.io/rixpress/)\n- [Repository of demos](https://github.com/b-rodrigues/rixpress_demos)\n\n## Fin\n\nIf you have questions:\n\n- bruno@brodrigues.co\n- Twitter: [@brodriguesco](https://x.com/brodriguesco)\n- Mastodon: [@brodriguesco@fosstodon.org](https://fosstodon.org/@brodriguesco)\n- Blog: [www.brodrigues.co](https://brodrigues.co/)\n- Book: [www.raps-with-r.dev](https://raps-with-r.dev/)\n- rix: [https://docs.ropensci.org/rix](https://docs.ropensci.org/rix)\n- rixpress: [https://b-rodrigues.github.io/rixpress/](https://b-rodrigues.github.io/rixpress/)\n\nThanks!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}